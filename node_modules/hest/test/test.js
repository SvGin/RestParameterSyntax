/**
 * Created by Alexander Nuikin (nukisman@gmail.com) on 05.10.15.
 */
var expect = require('code').expect;
var when = require('when')

var Test = require('../index')

Test.suite('Test suite #1', function () {

    Test.case('Get chickens breed', function (test) {
        test
            .log('Test started')
            .customExt('XXX')
            .req('GET', {url: '/chickens/xxx'}).text().print('Chickens 2')
            .req('GET', {url: '/chickensMM/xxx'}).status(404).print('Chickens 3')
            .delay(500, 'Test in progress...')
            .get({url: '/chickens/yyy'}).text('Chicken breeds yyy').print()
            .get({url: '/chickens/yyy'}).text('Chicken breeds yyy')//.print('Chickens 5')
            .log('before error')
            //.get('/chickens/zzz').text({abcdefghijklmn: 'opqrstuvwxyz'}).print('Never printed')
            .log('Test passed')
    })

    Test.case('Get chickens breed 2', function (test) {
        test
            .req('GET', () => {
                return {url: '/chickens/arrow'}
            }).text().print('Chickens arrow')
            .get(() => {
                return {url: '/chickens/arrow'}
            }).text().print('Chickens arrow')
            .do((ctx) => {
                ctx.param = 'arrow-ctx'
            })
            .req('GET', (ctx) => {
                return {url: `/chickens/${ctx.param}`}
            }).text().print('Chickens arrow-ctx')
            .get((ctx) => {
                return {url: `/chickens/${ctx.param}`}
            }).text().print('Chickens get-arrow-ctx')
    })

    Test.case('Integration test', function (test) {
        test.getUser = function (userId) {
            return this
                .log('Custom method: getUser')
                .get({url: '/test/user/' + userId}).print('getUser')
                .expect(function (ctx, user) {
                    expect(user).to.be.an.string()
                })
                .json()
                .expect(function (ctx, user) {
                    expect(user).to.be.an.object()
                    //expect(user, 'WrongTest').to.contain({abc: 123})
                    expect(user.id).to.be.a.number()
                    expect(user.type).to.be.equal('user')
                    ctx.log('User', userId, 'is OK: ', user)
                })
        }

        test
            .log('Test start')
            .get({url: '/test/user/1'}).json().print()
            .expect(function (ctx, user, res) {
                expect(user).to.be.an.object()
                ctx.log('Put user to test context')
                ctx.user = user
            })
            .expect(function (ctx, user, res) {
                expect(user.id).to.be.a.number()
                expect(res.statusCode).to.be.equal(200)
            })
            .do(function (ctx, user, res) { // No expectations. Just some actions.
                // Use response object
                ctx.log('Response statusCode:', res.statusCode)
                // Or just test context
                ctx.log('Get user from test context:', ctx.user)
                return when.promise(function (resolve, reject) {
                    ctx.log('Some async action: started ...')
                    setTimeout(function () {
                        ctx.log('Some async action: finished')
                        resolve('async finished')
                    }, 1200)
                })
            })
            .log('Test middle')
            .getUser(123)
            .log('Test end')
    })
})